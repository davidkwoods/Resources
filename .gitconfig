[core]
    gc = true
    editor = 'C:\\Program Files\\Notepad++\\notepad++.exe' -multiInst -nosession -noPlugin
    attributesfile = C:\\Users\\dwoo\\.gitattributes
# This pager line sets diff output to utf8
    pager = LESSCHARSET=utf-8 less -R
# This pager line sets diff output to utf8, and fixes window sizes since pwsh 7.1.3 is playing funny
#    pager = LESSCHARSET=utf-8 COLUMNS=170 LINES=44 less -MR
    autocrlf = false
# FSMonitor spawns a long-lived git process for each repo visited when enabled.  Maybe best to enable it only on specific repos.
    usebuiltinfsmonitor = true
    fsmonitor = true
    untrackedCache = true
    longpaths = true
    commitGraph = true
[user]
    name = David Woods
    email = ***@hotmail.com
[push]
    default = upstream
[credential]
    helper = manager-core
[commit]
    cleanup = scissors
[rebase]
    useBuiltin = true
[stash]
    useBuiltin = true
[rerere]
    enabled = false

[diff]
    tool = vsdiffmerge
    renameLimit = 1000000
[merge]
    tool = semanticmerge
    renameLimit = 1000000
[difftool]
    prompt = false
[difftool "semanticmerge"]
    # cmd = \"C:\\Users\\dwoo\\AppData\\Local\\semanticmerge\\semanticmergetool.exe\" -s \"$LOCAL\" -d \"$REMOTE\" --nolangwarn
    cmd = \"C:\\Users\\dwoo\\AppData\\Local\\semanticmerge\\semanticmergetool.exe\" -s \"$LOCAL\" -d \"$REMOTE\" --nolangwarn -edt=\"mergetool.exe  -s=\"\"@sourcefile\"\" -sn=\"\"@sourcesymbolic\"\" -d=\"\"@destinationfile\"\" -dn=\"\"@destinationsymbolic\"\" -t=\"\"@filetype\"\" -i=\"\"@comparationmethod\"\" -e=\"\"@fileencoding\"\"\"
    trustExitCode = true
[difftool "odd"]
    cmd = odd $LOCAL $REMOTE
    keepBackup = false
    trustExitCode = true
[difftool "bc"]
    path = C:\\Program Files\\Beyond Compare 4\\BComp.exe
    keepBackup = false
    trustExitCode = true
[difftool "vsdiffmerge"]
    cmd = \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\TeamFoundation\\Team Explorer\\vsdiffmerge.exe\" \"$LOCAL\" \"$REMOTE\" //t
    keepBackup = false

[mergetool]
#    prompt = false
    keepbackup = false
[mergetool "semanticmerge"]
    cmd = \"C:\\Users\\dwoo\\AppData\\Local\\semanticmerge\\semanticmergetool.exe\" -s \"$REMOTE\" -d \"$LOCAL\" -b \"$BASE\" -r \"$MERGED\" --nolangwarn
    # cmd = \"C:\\Users\\dwoo\\AppData\\Local\\semanticmerge\\semanticmergetool.exe\" -b=\"$BASE\" -d=\"$LOCAL\" -s=\"$REMOTE\" -r=\"$MERGED\" -l=csharp -emt=\"mergetool.exe -b=\"\"@basefile\"\" -bn=\"\"@basesymbolic\"\" -s=\"\"@sourcefile\"\" -sn=\"\"@sourcesymbolic\"\" -d=\"\"@destinationfile\"\" -dn=\"\"@destinationsymbolic\"\" -r=\"\"@output\"\" -t=\"\"@filetype\"\" -i=\"\"@comparationmethod\"\" -e=\"\"@fileencoding\"\"\" -edt=\"mergetool.exe  -s=\"\"@sourcefile\"\" -sn=\"\"@sourcesymbolic\"\" -d=\"\"@destinationfile\"\" -dn=\"\"@destinationsymbolic\"\" -t=\"\"@filetype\"\" -i=\"\"@comparationmethod\"\" -e=\"\"@fileencoding\"\"\"
    trustexitcode = true
[mergetool "xmerge"]
    cmd = \"C:\\Users\\dwoo\\AppData\\Local\\semanticmerge\\mergetool.exe\" -s=\"$REMOTE\" -d=\"$LOCAL\" -b=\"$BASE\" -r=\"$MERGED\"
    trustexitcode = true
[mergetool "bc"]
    path = C:\\Program Files\\Beyond Compare 4\\BComp.exe
    keepBackup = false
    trustExitCode = true

[alias]
    current-branch = "!git rev-parse --abbrev-ref HEAD"
    root = "!git rev-parse --show-toplevel"
    dift = !pwsh -nop -c "git difftool -d -t odd \"$@\" & #"
    diftx = !pwsh -nop -c "git difftool -t semanticmerge \"$@\" & #"
    diftc = !pwsh -nop -c "git difftool -d -t odd --cached &"
    diftu = !pwsh -nop -c "git difftool -d -t odd \\'${1-HEAD}@{u}\\' ${1-HEAD} &"
    # diftu = !sh -c 'git difftool -d -t odd ${1-HEAD}@\\{u\\} ${1-HEAD} &' -
    diftf = !pwsh -nop -c "git difftool -d -t odd ${1-$(git current-branch)}.fork ${1-$(git current-branch)} &"
    diffit = !pwsh -nop -c "git difftool -d -t odd ${1-HEAD}^ ${1-HEAD} & #"
    difs = diff -M --stat=170 --dirstat
    dif = diff -M --color-words --ws-error-highlight=all
    difc = diff -M --cached --color-words
    difu = !sh -c 'git diff -M --color-words ${1-HEAD}@\\{u\\} ${1-HEAD}' -
    difus = !sh -c 'git diff -M --stat=170 --dirstat ${1-HEAD}@\\{u\\} ${1-HEAD}' -
    difsu = !sh -c 'git diff -M --stat=170 --dirstat ${1-HEAD}@\\{u\\} ${1-HEAD}' -
    difm = diff -M --color-moved
    difcm = diff -M --cached --color-moved
    difcs = diff -M --cached --stat=170 --dirstat
    difb = !sh -c 'git diff -M --color-words ${1-master}...${2-HEAD}' -
    difsb = !sh -c 'git diff -M --stat=170 --dirstat ${1-master}...${2-HEAD}' -
    difbs = !sh -c 'git diff -M --stat=170 --dirstat ${1-master}...${2-HEAD}' -
    diftb = !pwsh -nop -c "git difftool -d -t odd ${1-master}...${2-HEAD} &"
    difbt = !pwsh -nop -c "git difftool -d -t odd ${1-master}...${2-HEAD} &"
    difd = diff --dirstat
    difcd = diff --cached --dirstat
    difw = diff -M --color-words --ws-error-highlight=all --word-diff-regex=.
    difcw = diff -M --cached --color-words --word-diff-regex=.
    cpdiff = !sh -c 'git range-diff ${1}^..${1} ${2}^..${2}' -
    sub = submodule update
    wipe = reset --hard
    nuke = "!git scorch ; git reset --hard HEAD@{u}"
    scorch = clean -dxf -e /**/.vs*/ -e /**/*.lock.json -e /**/*.nuget.targets -e /**/project.json
    scorchh = clean -dxf -e /**/.vs*/ -e /**/*.lock.json -e /**/*.nuget.targets -e /**/project.json -e /Binaries/
    fa = fetch --all
    fp = fetch --prune
    fap = fetch --all --prune
    fpa = fetch --all --prune
    fpp = "!git fetch --prune self ; git fetch --prune origin"
    fpm = "!git fetch --prune ; git merge -n --ff-only HEAD@{u}"
    fppm = "!git fetch --prune self ; git fetch --prune origin && git merge -n --ff-only HEAD@{u}"
    fpam = "!git fetch --prune --all ; git merge -n --ff-only HEAD@{u}"
    fapm = "!git fetch --prune --all ; git merge -n --ff-only HEAD@{u}"
    fpr = "!git fetch --prune ; git rebase"
    fppr = "!git fetch --prune self ; git fetch --prune origin && git rebase"
    fpar = "!git fetch --prune --all ; git rebase"
    fapr = "!git fetch --prune --all ; git rebase"
    mu = merge -n HEAD@{u}
    muf = !sh -c 'git branch -f ${1} ${1}@\\{u\\}' -
    ff = merge --ff-only -n
    ru = reset HEAD@{u}
    rhu = reset --hard HEAD@{u}
    pp = pull --prune
    stat = status --short --branch
    statc = "!echo 'Conflicted Files:'; git diff --name-only --diff-filter=U"
    fork = "!sh -c 'git checkout -b ${1}; git branch -t ${1}.fork ${1}' -"
    br = "!git branch ; echo ; git branch -r"
    brc = branch --all --contains
    brp = "!git branch ; echo ; git branch -r --list self/* ; git branch -r --list origin/feature/* ; git branch -r --list origin/release/* ; git branch -r --list origin/user/dwoo/*"
    brmine = branch -r --list origin/user/dwoo/* --sort=committerdate
    brme = branch --sort=committerdate
    bv = branch -vv
    tc = tag --contains
    btc = "!sh -c 'git branch --all --contains ${1}; echo; echo "Tags:"; git tag --contains ${1}' -"
    sb = show-branch --sha1-name
    sbc = show-branch --current --sha1-name
    count = "!sh -c 'echo ${1-HEAD@\\{u\\}}...${2-HEAD}; git rev-list --left-right --count ${1-HEAD@\\{u\\}}...${2-HEAD}' -"
    countleft = !sh -c 'git rev-list --count ${1} ^${2}' -
    countright = !sh -c 'git rev-list --count ^${1} ${2}' -
    sh = show -M --word-diff=color --pretty=mysummary
    shw = show -M --word-diff=color --pretty=mysummary --word-diff-regex=.
    shs = show -M --shortstat --pretty=mysummary
    shd = show -M --dirstat --pretty=mysummary
    shss = show -M --name-status --pretty=mysummary
    shf = show -M --stat=170 --dirstat  --pretty=mysummary
    shff = !git diff-tree --no-commit-id --name-only --line-prefix="$(git rev-parse --show-toplevel)/" -r ${1-HEAD}
    unignored = ls-files -ic --exclude-standard
    ignored = clean -ndx
    ignoredd = ls-files --others -i --exclude-standard
    amend = !sh -c 'git commit --amend ${1+-m} \"${1---reuse-message=HEAD}\"' -
    l = shortlog -sne
    anchor = branch -f --no-track
    anchorr = branch -f --no-track anchor
    mergebc = mergetool --tool bc
    xmerge = mergetool -t xmerge
    wip = !sh -c 'git commit -m \"[WIP] ${1-Work in progress}\"' -
    getpr = !git fetch origin +refs/pull/${1}/merge:PR-${1}
    co = checkout
    cob = checkout --no-track -b
    cobb = checkout --no-track --unset-upstream -B
    cop = !sh -c 'git checkout -b ${1} origin/user/dwoo/${1}' -
    cp = cherry-pick -x

    odd = !pwsh -nop -c "git difftool -d -t odd ${1-master}...${2-HEAD}" &

    follow   = log --follow --date=format-local:%c --pretty=logone
    follow2  = log --follow --date=format-local:%c --pretty=logtwo
    follow3  = log --follow --date=format-local:%c --pretty=logthree
    followw  = log --follow --date=format-local:%c --pretty=logone --all
    followw2 = log --follow --date=format-local:%c --pretty=logtwo --all
    followw3 = log --follow --date=format-local:%c --pretty=logthree --all

    lg       = log --graph --date=format-local:%c -M -i --pretty=logone
    lg1      = log --graph --date=format-local:%c -M -i --pretty=logonee
    lg2      = log --graph --date=format-local:%c -M -i --pretty=logtwo
    lg3      = log --graph --date=format-local:%c -M -i --pretty=logthree
    lgf      = log --graph --date=format-local:%c -M -i --pretty=logone --first-parent
    lgf2     = log --graph --date=format-local:%c -M -i --pretty=logtwo --first-parent
    lgf3     = log --graph --date=format-local:%c -M -i --pretty=logthree --first-parent
    lgg      = log --graph --date=format-local:%c -M -i --pretty=logone --all
    lgg2     = log --graph --date=format-local:%c -M -i --pretty=logtwo --all
    lgg3     = log --graph --date=format-local:%c -M -i --pretty=logthree --all
    lggf     = log --graph --date=format-local:%c -M -i --pretty=logone --all --first-parent
    lggf2    = log --graph --date=format-local:%c -M -i --pretty=logtwo --all --first-parent
    lggf3    = log --graph --date=format-local:%c -M -i --pretty=logthree --all --first-parent
    lgu      = !git log --graph --date=format-local:%c -M -i --pretty=logone ${1-HEAD}@{u}
    lgu2     = !git log --graph --date=format-local:%c -M -i --pretty=logtwo ${1-HEAD}@{u}
    lgu3     = !git log --graph --date=format-local:%c -M -i --pretty=logthree ${1-HEAD}@{u}
    lgt      = !git log --graph --date=format-local:%c -M -i --pretty=logone ${1-$(git current-branch).fork}..${1-$(git current-branch)}
    lgt2     = !git log --graph --date=format-local:%c -M -i --pretty=logtwo ${1-$(git current-branch).fork}..${1-$(git current-branch)}
    lgt3     = !git log --graph --date=format-local:%c -M -i --pretty=logthree ${1-$(git current-branch).fork}..${1-$(git current-branch)}
    lgb      = !git log --graph --date=format-local:%c -M -i --pretty=logone ${2-master}..${1-HEAD}
    lgo      = log --date=format-local:%c -M -i --pretty=logone
    lgo2     = log --date=format-local:%c -M -i --pretty=logtwo
    lgo3     = log --date=format-local:%c -M -i --pretty=logthree
    lgs      = log --graph --date=format-local:%c --pretty=logone -20
    lgc      = log --graph --date=format-local:%c --pretty=logone -5
    lgos     = log --date=format-local:%c --pretty=logone -20
    lgoc     = log --date=format-local:%c --pretty=logone -5
    lgoo     = log --pretty=logoneline
    lgoos    = log --date=format-local:%c --pretty=logoneline -20
    lgooc    = log --date=format-local:%c --pretty=logoneline -5
    lgme     = log --date=format-local:%c -M -i --pretty=logoneline --author=dwoo
    lga      = log --graph --date=format-local:%c -M -i --pretty=logone --ancestry-path

    lgcolors = log --graph --date=format-local:%c -M -i --pretty=colortest -5

[pretty]
    logoneline = tformat:%C(bold blue)%h%C(reset) - %C(reset)%s
    logone = tformat:%C(bold blue)%h%C(bold cyan)%d%C(reset) - %C(dim white)(%cr)%C(reset) %C(bold white)%s %C(dim white)- %an <%ae>%C(reset)
    logtwo = tformat:%C(bold blue)%h%C(bold cyan)%d%C(reset) - %C(bold green)%cd%C(reset) %C(dim white)(%cr) %C(bold yellow)%C(dim)(authored:%ar)%C(reset)%n          %C(bold white)%s%C(reset) %C(dim white)- %an <%ae>%C(reset)
    logthree = tformat:%C(bold blue)%h%C(bold cyan)%d%C(reset) - %C(bold green)%cd%C(reset) %C(dim white)(%cr)%C(reset) %C(green)(authored: %ad)%C(reset)%n          %C(bold white)%s%C(reset)%n          %C(bold white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)
    mysummary = tformat:%C(bold blue) %H%n%C(bold cyan)%d%n %C(bold green)%cd%C(reset) %C(dim white)(%cr)%C(reset) %C(green)(authored: %ad)%n %C(bold white)%an <%ae> %C(dim white)(committer: %cn <%ce>)%n%n%C(bold white)%s%n%+b%C(reset)
    colortest = tformat:%C(bold white)bold white %C(reset)%C(dim white)dim white %C(reset)%C(bold normal)bold normal %C(reset)%C(dim normal)dim normal %C(reset)%C(bold black)bold black %C(reset)%C(dim black)dim black%n%C(reset)%C(bold red)bold red %C(reset)%C(dim red)dim red %C(reset)%C(bold green)bold green %C(reset)%C(dim green)dim green %C(reset)%C(bold yellow)bold yellow %C(reset)%C(dim yellow )dim yellow%n%C(reset)%C(bold blue)bold blue %C(reset)%C(dim blue)dim blue %C(reset)%C(bold magenta)bold magenta %C(reset)%C(dim magenta)dim magenta %C(reset)%C(bold cyan)bold cyan %C(reset)%C(dim cyan)dim cyan%C(reset)

#    lg1-specific = log --graph --abbrev-commit --decorate --pretty=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'
#    lg2-specific = log --graph --abbrev-commit --decorate --pretty=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
#    lg3-specific = log --graph --abbrev-commit --decorate --pretty=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'

[http]
    sslVersion = tlsv1.2

[pager]
    branch = cat
